import Constants from 'expo-constants';

// Define possible response structures from LLM
interface LLMTaskResponse {
  title: string;
  description?: string;
  tags?: string[] | string;
  priority?: string;
  dueDate?: string;
  due_date?: string | number; // For backward compatibility
  category?: string;
  estimatedTime?: string;
}

interface ProcessedTask {
  id: string;
  title: string;
  description?: string;
  priority?: 'low' | 'medium' | 'high';
  dueDate?: string;
  completed: boolean;
  createdAt: string;
  category?: string;
  tags?: string[];
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
function generateId(): string {
  return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–π –≥–æ–ª–æ—Å–æ–≤–æ–π —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é LLM –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
 * @param text –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π –≥–æ–ª–æ—Å–æ–≤–æ–π —Ç–µ–∫—Å—Ç
 * @returns –ú–∞—Å—Å–∏–≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
 */
export async function processVoiceText(text: string): Promise<ProcessedTask[]> {
  try {
    // –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á
    const systemPrompt = `
      –¢—ã - –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—é –∑–∞–¥–∞—á –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞.
      
      –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Ä–∞–∑–±–∏—Ç—å –≤—Ö–æ–¥—è—â–∏–π —Ç–µ–∫—Å—Ç –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π.
      
      –î–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏ –æ–ø—Ä–µ–¥–µ–ª–∏:
      1. –ù–∞–∑–≤–∞–Ω–∏–µ (–∫—Ä–∞—Ç–∫–æ–µ, –ø–æ–Ω—è—Ç–Ω–æ–µ)
      2. –î–æ–±–∞–≤—å –æ–¥–∏–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π —ç–º–æ–¥–∑–∏ –≤ –Ω–∞—á–∞–ª–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏
      3. –û–ø–∏—Å–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–µ—Ç–∞–ª–∏)
      4. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (high, medium, low - –æ–ø—Ä–µ–¥–µ–ª–∏ –∏—Å—Ö–æ–¥—è –∏–∑ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏)
      5. –ö–∞—Ç–µ–≥–æ—Ä–∏—é (Work, Personal, Health, Shopping, Education, Finance, Travel, Design, Research, –∏–ª–∏ –¥—Ä—É–≥—É—é –ø–æ–¥—Ö–æ–¥—è—â—É—é)
      6. –¢–µ–≥–∏ (–≤–∞–∂–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –∑–∞–¥–∞—á–∏, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ: Urgent, Important, Meeting, Project, Reminder, Design, Feedback, Later, InProgress, Review)
      7. –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–µ—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –¥–∞—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –µ—ë. –ï—Å–ª–∏ –Ω–µ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è - –∏—Å–ø–æ–ª—å–∑—É–π —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É)
      
      –¢–µ–∫—Å—Ç –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á, —Ä–∞–∑–±–µ–π –∏—Ö –ø—Ä–∞–≤–∏–ª—å–Ω–æ.
      –í–ê–ñ–ù–û: –î–ª—è –≤—Å–µ—Ö –∑–∞–¥–∞—á, –µ—Å–ª–∏ —Å—Ä–æ–∫ —è–≤–Ω–æ –Ω–µ —É–∫–∞–∑–∞–Ω, –ø–æ—Å—Ç–∞–≤—å —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É.
      –í–æ–∑–≤—Ä–∞—â–∞–π —Ç–æ–ª—å–∫–æ JSON-–º–∞—Å—Å–∏–≤ —Å –∑–∞–¥–∞—á–∞–º–∏, –±–µ–∑ –ø—Ä–µ–∞–º–±—É–ª –∏ –ø–æ—è—Å–Ω–µ–Ω–∏–π.

      –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
      [
        {
          "title": "üõí –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å —ç–º–æ–¥–∑–∏",
          "description": "–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)",
          "priority": "high|medium|low",
          "category": "Work|Personal|Health|Shopping|Education|Finance|Travel|Design|Research|Other",
          "tags": ["Urgent", "Meeting", "–î—Ä—É–≥–∏–µ_—Ç–µ–≥–∏_–µ—Å–ª–∏_–µ—Å—Ç—å"],
          "dueDate": "${new Date().toISOString()}" // –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ—Ç —Ñ–æ—Ä–º–∞—Ç —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        },
        // –¥—Ä—É–≥–∏–µ –∑–∞–¥–∞—á–∏
      ]
    `;

    // –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–ª—é—á –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const apiKey = Constants?.expoConfig?.extra?.openRouterApiKey || process.env.OPEN_ROUTER_API_KEY || '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';
    
    // –ü—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–≤—É—é –º–æ–¥–µ–ª—å, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ç–æ—Ä—É—é
    const models = [
      'google/gemini-2.0-flash-exp:free'
    ];
    
    let data;
    let response;
    let successfulModel = '';
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–Ω—ã–µ –º–æ–¥–µ–ª–∏
    for (const model of models) {
      try {
        console.log(`Trying to use model: ${model}`);
        
        response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${apiKey}`,
            'Content-Type': 'application/json',
            'HTTP-Referer': 'https://voice-todo.app',  // –î–æ–±–∞–≤–ª—è–µ–º referer –¥–ª—è OpenRouter
            'X-Title': 'VoiceTodo App'                 // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
          },
          body: JSON.stringify({
            model: model,
            messages: [
              {
                role: 'system',
                content: systemPrompt + "\n–í–∞–∂–Ω–æ: –≤–æ–∑–≤—Ä–∞—â–∞–π –¢–û–õ–¨–ö–û –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JSON –º–∞—Å—Å–∏–≤ –∑–∞–¥–∞—á –∏ –Ω–∏—á–µ–≥–æ –±–æ–ª—å—à–µ!"
              },
              {
                role: 'user',
                content: text,
              },
            ],
            response_format: { type: "json_object" },
            max_tokens: 1000,
            temperature: 0.4  // –°–Ω–∏–∂–∞–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –¥–ª—è –±–æ–ª–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
          }),
        });

        if (!response.ok) {
          const errorText = await response.text();
          console.error(`LLM API error with model ${model}:`, errorText);
          continue; // –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –º–æ–¥–µ–ª—å
        }

        data = await response.json();
        console.log(`Response from model ${model}:`, JSON.stringify(data).substring(0, 200) + '...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –æ—Ç–≤–µ—Ç–µ –µ—Å—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ message.content
        if (data.choices && data.choices[0] && data.choices[0].message && data.choices[0].message.content) {
          successfulModel = model;
          break; // –ù–∞—à–ª–∏ —Ä–∞–±–æ—Ç–∞—é—â—É—é –º–æ–¥–µ–ª—å —Å –ø–æ–ª–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º
        } else {
          console.error(`Model ${model} returned incomplete response structure:`, JSON.stringify(data));
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–µ—Ä–µ–±–æ—Ä –º–æ–¥–µ–ª–µ–π
        }
      } catch (modelError) {
        console.error(`Error with model ${model}:`, modelError);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–µ—Ä–µ–±–æ—Ä –º–æ–¥–µ–ª–µ–π
      }
    }
    
    // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –±—ã–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫
    if (!data || !data.choices || !data.choices[0] || !data.choices[0].message) {
      console.error('All models failed. Response structure:', JSON.stringify(response || {}));
      throw new Error('Could not get valid response from any LLM model');
    }
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
    const content = data.choices[0].message.content;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    if (!content) {
      console.error(`Empty content in response from model ${successfulModel}:`, JSON.stringify(data));
      // –í–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏ –≤–µ—Ä–Ω–µ–º –±–∞–∑–æ–≤—É—é –∑–∞–¥–∞—á—É
      return [{
        id: generateId(),
        title: `üìù ${text.length > 30 ? text.substring(0, 30) + '...' : text}`,
        description: text,
        priority: 'medium',
        dueDate: new Date().toISOString(),
        completed: false,
        createdAt: new Date().toISOString(),
        category: '',
        tags: [],
      }];
    }
    
    // –ü–∞—Ä—Å–∏–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
    try {
      // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ JSON –≤ –æ—Ç–≤–µ—Ç–µ, –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –≤–µ—Ä–Ω–µ—Ç —Ç–µ–∫—Å—Ç —Å –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏
      let jsonString = content.trim();
      let tasks: LLMTaskResponse[] = [];

      // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å JSON –º–∞—Å—Å–∏–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
      try {
        // –ï—Å–ª–∏ –≤–µ—Ä–Ω—É–ª—Å—è –æ–±—ä–µ–∫—Ç —Å tasks –∫–∞–∫ –º–∞—Å—Å–∏–≤–æ–º
        if (jsonString.startsWith('{') && jsonString.includes('"tasks"')) {
          const jsonObj = JSON.parse(jsonString);
          if (Array.isArray(jsonObj.tasks)) {
            tasks = jsonObj.tasks;
          }
        } 
        // –ï—Å–ª–∏ –≤–µ—Ä–Ω—É–ª—Å—è –º–∞—Å—Å–∏–≤ –Ω–∞–ø—Ä—è–º—É—é
        else if (jsonString.startsWith('[') && jsonString.endsWith(']')) {
          tasks = JSON.parse(jsonString);
        }
        // –ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å —á—Ç–æ-—Ç–æ –ø–æ—Ö–æ–∂–µ–µ –Ω–∞ –º–∞—Å—Å–∏–≤ JSON
        else {
          const jsonMatch = content.match(/\[\s*{[\s\S]*}\s*\]/);
          if (jsonMatch) {
            tasks = JSON.parse(jsonMatch[0]);
          }
        }
      } catch (jsonError) {
        console.error('Initial JSON parsing failed:', jsonError);
        // –ë–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –∏–∑–≤–ª–µ—á–µ–Ω–∏—é JSON
        try {
          // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª—é–±—ã–µ –æ–±—ä–µ–∫—Ç—ã –≤ —Ñ–∏–≥—É—Ä–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö
          const objectMatches = content.match(/{[^{}]*(((?:{[^{}]*})[^{}]*)+|[^{}]*)}+/g);
          if (objectMatches && objectMatches.length > 0) {
            // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
            const objectsJson = `[${objectMatches.join(',')}]`;
            try {
              tasks = JSON.parse(objectsJson);
            } catch (e) {
              // –í–æ–∑–º–æ–∂–Ω–æ —É –Ω–∞—Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON - –ø–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
              const cleanedJson = objectsJson
                .replace(/,\s*}/g, '}') // –£–±—Ä–∞—Ç—å –∑–∞–ø—è—Ç—ã–µ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–æ–π
                .replace(/,\s*\]/g, ']'); // –£–±—Ä–∞—Ç—å –∑–∞–ø—è—Ç—ã–µ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–π —Å–∫–æ–±–∫–æ–π
              tasks = JSON.parse(cleanedJson);
            }
          } else {
            throw new Error('No valid JSON objects found');
          }
        } catch (aggressiveError) {
          console.error('Aggressive JSON extraction failed:', aggressiveError);
          
          // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∑–∞–¥–∞—á—É —Å —Ç–µ–∫—Å—Ç–æ–º –æ—Ç–≤–µ—Ç–∞ LLM
          tasks = [{
            title: content.length > 50 ? `${content.substring(0, 50)}...` : content,
            description: content
          }];
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –º–∞—Å—Å–∏–≤ –∑–∞–¥–∞—á
      if (!Array.isArray(tasks) || tasks.length === 0) {
        console.log('Creating default task from invalid task format');
        return [{
          id: generateId(),
          title: `üìù ${text.length > 30 ? text.substring(0, 30) + '...' : text}`,
          description: text,
          priority: 'medium',
          dueDate: new Date().toISOString(),
          completed: false,
          createdAt: new Date().toISOString(),
          category: '',
          tags: [],
        }];
      }
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã –æ–Ω–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª–∏ –æ–∂–∏–¥–∞–µ–º–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
      return tasks.map(task => {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—è —Å–µ–≥–æ–¥–Ω—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const today = new Date();
        let dueDate;
        
        // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –¥–∞—Ç–∞ –≤ –∑–∞–¥–∞—á–µ, –ø—Ä–æ–±—É–µ–º –µ—ë –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
        if (task.dueDate || task.due_date) {
          try {
            // –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –¥–∞—Ç—É –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
            const parsedDate = new Date(task.dueDate || task.due_date || '');
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∞—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞
            if (!isNaN(parsedDate.getTime())) {
              dueDate = parsedDate.toISOString();
            } else {
              // –ï—Å–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–≥–æ–¥–Ω—è
              dueDate = today.toISOString();
            }
          } catch (e) {
            // –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–≥–æ–¥–Ω—è
            dueDate = today.toISOString();
          }
        } else {
          // –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–≥–æ–¥–Ω—è
          dueDate = today.toISOString();
        }
        
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–≥–∏
        let tags: string[] = [];
        if (task.tags) {
          if (typeof task.tags === 'string') {
            // –ï—Å–ª–∏ —Ç–µ–≥–∏ –ø—Ä–∏—à–ª–∏ —Å—Ç—Ä–æ–∫–æ–π, —Ä–∞–∑–¥–µ–ª—è–µ–º –ø–æ –∑–∞–ø—è—Ç–æ–π
            tags = task.tags.split(',').map(tag => tag.trim()).filter(tag => tag.length > 0);
          } else if (Array.isArray(task.tags)) {
            // –ï—Å–ª–∏ —Ç–µ–≥–∏ —É–∂–µ –º–∞—Å—Å–∏–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
            tags = task.tags.map(tag => tag.toString().trim()).filter(tag => tag.length > 0);
          }
        }
        
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        let category = '';
        if (task.category && typeof task.category === 'string') {
          category = task.category.trim();
        }
        
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        let priority: 'low' | 'medium' | 'high' = 'medium';
        if (task.priority) {
          const priorityStr = task.priority.toString().toLowerCase().trim();
          if (['low', 'medium', 'high'].includes(priorityStr)) {
            priority = priorityStr as 'low' | 'medium' | 'high';
          }
        }
        
        // –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∑–∞–¥–∞—á—É
        const processedTask: ProcessedTask = {
          id: generateId(),
          title: task.title || '',
          description: task.description || '',
          priority,
          dueDate,
          completed: false,
          createdAt: new Date().toISOString(),
          category,
          tags,
        };
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–º–æ–¥–∑–∏, –µ—Å–ª–∏ –Ω–µ—Ç - –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ
        if (!processedTask.title.match(/[\u{1F300}-\u{1F5FF}\u{1F900}-\u{1F9FF}\u{1F600}-\u{1F64F}\u{1F680}-\u{1F6FF}\u{2600}-\u{26FF}\u{2700}-\u{27BF}\u{1F1E6}-\u{1F1FF}\u{1F191}-\u{1F251}\u{1F004}\u{1F0CF}\u{1F170}-\u{1F171}\u{1F17E}-\u{1F17F}\u{1F18E}\u{3030}\u{2B50}\u{2B55}\u{2934}-\u{2935}\u{2B05}-\u{2B07}\u{2B1B}-\u{2B1C}\u{3297}\u{3299}\u{303D}\u{00A9}\u{00AE}\u{2122}\u{23F3}\u{24C2}\u{23E9}-\u{23EF}\u{25B6}\u{23F8}-\u{23FA}]/u)) {
          processedTask.title = `üìù ${processedTask.title}`;
        }
        
        return processedTask;
      });
    } catch (error) {
      console.error('Error parsing LLM response:', error);
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON, –≤–µ—Ä–Ω–µ–º –±–∞–∑–æ–≤—É—é –∑–∞–¥–∞—á—É —Å –∏—Å—Ö–æ–¥–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
      return [{
        id: generateId(),
        title: `üìù ${text.length > 30 ? text.substring(0, 30) + '...' : text}`,
        description: text,
        priority: 'medium',
        dueDate: new Date().toISOString(),
        completed: false,
        createdAt: new Date().toISOString(),
        category: '',
        tags: [],
      }];
    }
  } catch (error) {
    console.error('Error processing voice text:', error);
    // –í —Å–ª—É—á–∞–µ –ª—é–±–æ–π –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∑–∞–¥–∞—á—É —Å –∏—Å—Ö–æ–¥–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
    return [{
      id: generateId(),
      title: `üìù ${text.length > 30 ? text.substring(0, 30) + '...' : text}`,
      description: text,
      priority: 'medium',
      dueDate: new Date().toISOString(),
      completed: false,
      createdAt: new Date().toISOString(),
      category: '',
      tags: [],
    }];
  }
} 