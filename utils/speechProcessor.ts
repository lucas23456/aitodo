import Constants from 'expo-constants';

// Define possible response structures from LLM
interface LLMTaskResponse {
  title: string;
  description?: string;
  tags?: string[] | string;
  priority?: string;
  dueDate?: string;
  due_date?: string | number; // For backward compatibility
  category?: string;
  estimatedTime?: string;
}

interface ProcessedTask {
  title: string;
  description?: string;
  tags?: string[];
  priority?: 'low' | 'medium' | 'high';
  dueDate?: string;
  category?: string;
  estimatedTime?: string;
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–π –≥–æ–ª–æ—Å–æ–≤–æ–π —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é LLM –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
 * @param text –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π –≥–æ–ª–æ—Å–æ–≤–æ–π —Ç–µ–∫—Å—Ç
 * @returns –ú–∞—Å—Å–∏–≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
 */
export async function processVoiceText(text: string): Promise<ProcessedTask[]> {
  try {
    // –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á
    const systemPrompt = `
      –¢—ã - –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—é –∑–∞–¥–∞—á –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞.
      
      –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Ä–∞–∑–±–∏—Ç—å –≤—Ö–æ–¥—è—â–∏–π —Ç–µ–∫—Å—Ç –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π.
      
      –î–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏ –æ–ø—Ä–µ–¥–µ–ª–∏:
      1. –ù–∞–∑–≤–∞–Ω–∏–µ (–∫—Ä–∞—Ç–∫–æ–µ, –ø–æ–Ω—è—Ç–Ω–æ–µ)
      2. –î–æ–±–∞–≤—å –æ–¥–∏–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π —ç–º–æ–¥–∑–∏ –≤ –Ω–∞—á–∞–ª–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏
      3. –û–ø–∏—Å–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–µ—Ç–∞–ª–∏)
      4. –¢–µ–≥ (–¢–û–õ–¨–ö–û –û–î–ò–ù –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–µ–≥: üíª —Ä–∞–±–æ—Ç–∞, üß† –ª–∏—á–Ω–æ–µ, üõçÔ∏è –ø–æ–∫—É–ø–∫–∏, üí™ –∑–¥–æ—Ä–æ–≤—å–µ, üìö —É—á–µ–±–∞ –∏ —Ç.–¥.)
      5. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (high, medium, low - –æ–ø—Ä–µ–¥–µ–ª–∏ –∏—Å—Ö–æ–¥—è –∏–∑ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏)
      6. –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–µ—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –¥–∞—Ç–∞ –∏–ª–∏ –≤—Ä–µ–º—è, –æ–ø—Ä–µ–¥–µ–ª–∏ timestamp)
      7. –ö–∞—Ç–µ–≥–æ—Ä–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä "–†–∞–±–æ—Ç–∞", "–õ–∏—á–Ω–æ–µ", "–®–æ–ø–ø–∏–Ω–≥")
      8. –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä "15 min", "1 —á–∞—Å", "2 —á–∞—Å–∞")
      
      –¢–µ–∫—Å—Ç –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á, —Ä–∞–∑–±–µ–π –∏—Ö –ø—Ä–∞–≤–∏–ª—å–Ω–æ.
      –í–∞–∂–Ω–æ: –≤—ã–±–µ—Ä–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Å–∞–º—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–µ–≥ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏.
      –í–æ–∑–≤—Ä–∞—â–∞–π —Ç–æ–ª—å–∫–æ JSON-–º–∞—Å—Å–∏–≤ —Å –∑–∞–¥–∞—á–∞–º–∏, –±–µ–∑ –ø—Ä–µ–∞–º–±—É–ª –∏ –ø–æ—è—Å–Ω–µ–Ω–∏–π.

      –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
      [
        {
          "title": "üõí –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å —ç–º–æ–¥–∑–∏",
          "description": "–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)",
          "tags": ["—Ç–æ–ª—å–∫–æ_–æ–¥–∏–Ω_—Ç–µ–≥"],
          "priority": "high|medium|low",
          "dueDate": "2023-04-15T14:00:00.000Z", // ISO —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã, –µ—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è —Å—Ä–æ–∫
          "category": "–∫–∞—Ç–µ–≥–æ—Ä–∏—è –∑–∞–¥–∞—á–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)",
          "estimatedTime": "15 min" // –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        },
        // –¥—Ä—É–≥–∏–µ –∑–∞–¥–∞—á–∏
      ]
    `;

    // –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–ª—é—á –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —á–µ—Ä–µ–∑ .env –∏–ª–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    const apiKey = Constants?.expoConfig?.extra?.openRouterApiKey || process.env.OPEN_ROUTER_API_KEY || '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';
    
    const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${apiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'google/gemini-2.5-pro-exp-03-25:free',
        messages: [
          {
            role: 'system',
            content: systemPrompt
          },
          {
            role: 'user',
            content: text,
          },
        ],
      }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('LLM API error:', errorText);
      throw new Error(`API error: ${response.status}`);
    }

    const data = await response.json();
    console.log('LLM Response:', data);
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
    const content = data.choices?.[0]?.message?.content;
    if (!content) {
      throw new Error('LLM returned empty response');
    }
    
    // –ü–∞—Ä—Å–∏–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
    try {
      // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ JSON –≤ –æ—Ç–≤–µ—Ç–µ, –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –≤–µ—Ä–Ω–µ—Ç —Ç–µ–∫—Å—Ç —Å –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏
      const jsonMatch = content.match(/\[[\s\S]*\]/);
      const jsonString = jsonMatch ? jsonMatch[0] : content;
      
      const tasks: LLMTaskResponse[] = JSON.parse(jsonString);
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã –æ–Ω–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª–∏ –æ–∂–∏–¥–∞–µ–º–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
      return tasks.map(task => {
        const processedTask: ProcessedTask = {
          title: task.title || '',
          description: task.description || '',
          tags: Array.isArray(task.tags) ? task.tags : (task.tags ? [task.tags] : ['Voice']),
          priority: ['low', 'medium', 'high'].includes(task.priority as string) ? task.priority as 'low' | 'medium' | 'high' : 'medium',
          dueDate: (task.dueDate || task.due_date) ? 
            new Date(task.dueDate || task.due_date || '').toISOString() : 
            new Date().toISOString(),
          category: task.category || 'Voice Input',
          estimatedTime: task.estimatedTime || '15 min'
        };
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–º–æ–¥–∑–∏, –µ—Å–ª–∏ –Ω–µ—Ç - –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ
        if (!processedTask.title.match(/[\u{1F300}-\u{1F5FF}\u{1F900}-\u{1F9FF}\u{1F600}-\u{1F64F}\u{1F680}-\u{1F6FF}\u{2600}-\u{26FF}\u{2700}-\u{27BF}\u{1F1E6}-\u{1F1FF}\u{1F191}-\u{1F251}\u{1F004}\u{1F0CF}\u{1F170}-\u{1F171}\u{1F17E}-\u{1F17F}\u{1F18E}\u{3030}\u{2B50}\u{2B55}\u{2934}-\u{2935}\u{2B05}-\u{2B07}\u{2B1B}-\u{2B1C}\u{3297}\u{3299}\u{303D}\u{00A9}\u{00AE}\u{2122}\u{23F3}\u{24C2}\u{23E9}-\u{23EF}\u{25B6}\u{23F8}-\u{23FA}]/u)) {
          processedTask.title = `üìù ${processedTask.title}`;
        }
        
        return processedTask;
      });
    } catch (error) {
      console.error('Error parsing LLM response:', error);
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON, –≤–µ—Ä–Ω–µ–º –±–∞–∑–æ–≤—É—é –∑–∞–¥–∞—á—É —Å –∏—Å—Ö–æ–¥–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
      return [{
        title: `üìù ${text}`,
        description: '',
        tags: ['Voice'],
        priority: 'medium',
        dueDate: new Date().toISOString(),
        category: 'Voice Input',
        estimatedTime: '15 min'
      }];
    }
  } catch (error) {
    console.error('Error processing voice text:', error);
    // –í —Å–ª—É—á–∞–µ –ª—é–±–æ–π –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∑–∞–¥–∞—á—É —Å –∏—Å—Ö–æ–¥–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
    return [{
      title: `üìù ${text}`,
      description: '',
      tags: ['Voice'],
      priority: 'medium',
      dueDate: new Date().toISOString(),
      category: 'Voice Input',
      estimatedTime: '15 min'
    }];
  }
} 